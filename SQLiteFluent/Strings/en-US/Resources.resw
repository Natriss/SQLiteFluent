<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddColumnDefault.Text" xml:space="preserve">
    <value>Default</value>
  </data>
  <data name="AddColumnIntoTableDialogCloseBtn" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="AddColumnIntoTableDialogPrimaryBtn" xml:space="preserve">
    <value>Add</value>
  </data>
  <data name="AddColumnIntoTableDialogTitle" xml:space="preserve">
    <value>Add new column</value>
  </data>
  <data name="AddColumnName.Text" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="AddColumnToTable.Text" xml:space="preserve">
    <value>Add column to table</value>
  </data>
  <data name="AddColumnType.Text" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="AddDatabase.Text" xml:space="preserve">
    <value>Add database</value>
  </data>
  <data name="AddDatabaseDialog.Text" xml:space="preserve">
    <value>Give your new SQLite Database a name.</value>
  </data>
  <data name="AddDatabaseDialogCloseBtn" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="AddDatabaseDialogPrimaryBtn" xml:space="preserve">
    <value>Add</value>
  </data>
  <data name="AddDatabaseDialogTitle" xml:space="preserve">
    <value>Add database</value>
  </data>
  <data name="AddedColumnToTable" xml:space="preserve">
    <value>Column has successfully been added to the table \"{0}\".</value>
  </data>
  <data name="AddTableFlyout.Text" xml:space="preserve">
    <value>Add table</value>
  </data>
  <data name="ApplicationName" xml:space="preserve">
    <value>SQLiteFluent</value>
  </data>
  <data name="AskBeforeDeletionDialogTitle" xml:space="preserve">
    <value>Are you sure?</value>
  </data>
  <data name="AskBeforeDeletionDialogTitleCloseBtn" xml:space="preserve">
    <value>On second thought</value>
  </data>
  <data name="AskBeforeDeletionDialogTitlePrimaryBtn" xml:space="preserve">
    <value>Yes, I'm sure</value>
  </data>
  <data name="AskClearTable" xml:space="preserve">
    <value>Are you sure you want to clear out the table?</value>
  </data>
  <data name="AskDeleteDatabase" xml:space="preserve">
    <value>Are you sure you want to delete the database?</value>
  </data>
  <data name="AskDeleteTable" xml:space="preserve">
    <value>Are you sure you want to delete the table?</value>
  </data>
  <data name="BackBtn.[using:Microsoft.UI.Xaml.Controls]ToolTipService.ToolTip" xml:space="preserve">
    <value>Back</value>
  </data>
  <data name="ClearDatabase.Text" xml:space="preserve">
    <value>Clear database</value>
  </data>
  <data name="ClearDataFromTable.Text" xml:space="preserve">
    <value>Clear table</value>
  </data>
  <data name="CopyBtn.[using:Microsoft.UI.Xaml.Controls]ToolTipService.ToolTip" xml:space="preserve">
    <value>Copy to clipboard</value>
  </data>
  <data name="Database.Text" xml:space="preserve">
    <value>Database</value>
  </data>
  <data name="DatabaseHasBeenAdded" xml:space="preserve">
    <value>Database has been added.</value>
  </data>
  <data name="DatabaseHasBeenImported" xml:space="preserve">
    <value>Database has been imported.</value>
  </data>
  <data name="DataHasBeenAddedToTable" xml:space="preserve">
    <value>Your entry has successfully been added to the table \"{0}\".</value>
  </data>
  <data name="DeleteDatabase.Text" xml:space="preserve">
    <value>Delete database</value>
  </data>
  <data name="DeleteRecordFlyout.Text" xml:space="preserve">
    <value>Delete record</value>
  </data>
  <data name="DeleteTable.Text" xml:space="preserve">
    <value>Delete table</value>
  </data>
  <data name="Error" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="Execute.Text" xml:space="preserve">
    <value>Execute</value>
  </data>
  <data name="ImportDatabase.Text" xml:space="preserve">
    <value>Import database</value>
  </data>
  <data name="ImportDatabaseBtn.Content" xml:space="preserve">
    <value>Choose file</value>
  </data>
  <data name="ImportDatabaseDialog.Text" xml:space="preserve">
    <value>Select a DB file.</value>
  </data>
  <data name="ImportDatabaseDialogCloseBtn" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="ImportDatabaseDialogPrimaryBtn" xml:space="preserve">
    <value>Import</value>
  </data>
  <data name="ImportDatabaseDialogTitle" xml:space="preserve">
    <value>Import database</value>
  </data>
  <data name="ImportDatabaseErrorDialog.Text" xml:space="preserve">
    <value>There is already a database with that name. The old database will be overwritten.</value>
  </data>
  <data name="Info" xml:space="preserve">
    <value>Info</value>
  </data>
  <data name="InsertDataIntoTable.Text" xml:space="preserve">
    <value>Insert data into table</value>
  </data>
  <data name="InsertDataIntoTableDialogCloseBtn" xml:space="preserve">
    <value>Close</value>
  </data>
  <data name="InsertDataIntoTableDialogPrimaryBtn" xml:space="preserve">
    <value>Insert</value>
  </data>
  <data name="InsertDataIntoTableDialogTitle" xml:space="preserve">
    <value>Insert data into the table</value>
  </data>
  <data name="QueryWasExecuted" xml:space="preserve">
    <value>Query was executed.</value>
  </data>
  <data name="RecipeBtn.Padding" xml:space="preserve">
    <value>8</value>
  </data>
  <data name="RecipeBtn.[using:Microsoft.UI.Xaml.Controls]ToolTipService.ToolTip" xml:space="preserve">
    <value>SQLite recipe book</value>
  </data>
  <data name="RecipeDelete.Information" xml:space="preserve">
    <value>The DELETE statement is used to remove all data from a table.</value>
  </data>
  <data name="RecipeDeleteWhere.Information" xml:space="preserve">
    <value>The DELETE statement with WHERE clause is used to remove data from a table.</value>
  </data>
  <data name="RecipeDropTable.Information" xml:space="preserve">
    <value>The DROP TABLE remove the table and all it's data.</value>
  </data>
  <data name="RecipePaneHeader.Text" xml:space="preserve">
    <value>SQLite commands</value>
  </data>
  <data name="RecipeSelect.Information" xml:space="preserve">
    <value>The SELECT statement is used to get data from specified columns or all data from a table.</value>
  </data>
  <data name="RecipeSelectGroupBy.Information" xml:space="preserve">
    <value>After a WHERE statement the GROUP BY is used to group your data by specified columns.</value>
  </data>
  <data name="RecipeSelectLimit.Information" xml:space="preserve">
    <value>Before the ORDER BY or at the end of the query the Limits the rows returned in a query result set to a specified number of rows or percentage of rows in SQLite.</value>
  </data>
  <data name="RecipeSelectOrderBy.Information" xml:space="preserve">
    <value>At the end of your query the ORDER BY is used to sort your data by specified columns and if it needs to be ASCENDING or DESCENDING.</value>
  </data>
  <data name="RecipeSelectWhere.Information" xml:space="preserve">
    <value>After a SELECT statement the WHERE is used to create an condition and when the condition is met. You'll get that that specific data.</value>
  </data>
  <data name="RecipeTitle.Text" xml:space="preserve">
    <value>SQLite recipe book</value>
  </data>
  <data name="RecipeUpdateWhere.Information" xml:space="preserve">
    <value>The UPDATE statement is used to modify existing data from the table.</value>
  </data>
  <data name="RefreshDatabaseList.Text" xml:space="preserve">
    <value>Refresh database list</value>
  </data>
  <data name="RefreshTables.Text" xml:space="preserve">
    <value>Refresh tables</value>
  </data>
  <data name="RenameDatabase.Text" xml:space="preserve">
    <value>Rename database</value>
  </data>
  <data name="RenameDatabaseDialog.Text" xml:space="preserve">
    <value>Give your database a new name.</value>
  </data>
  <data name="RenameDatabaseDialogCloseBtn" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="RenameDatabaseDialogPrimaryBtn" xml:space="preserve">
    <value>Rename</value>
  </data>
  <data name="RenameDatabaseDialogTitle" xml:space="preserve">
    <value>Rename database</value>
  </data>
  <data name="RenameDatabaseNewName.Text" xml:space="preserve">
    <value>New name:</value>
  </data>
  <data name="RenameDatabaseNewName.VerticalAlignment" xml:space="preserve">
    <value>Center</value>
  </data>
  <data name="RenameDatabaseOldName.Text" xml:space="preserve">
    <value>Old name:</value>
  </data>
  <data name="RenameTable.Text" xml:space="preserve">
    <value>Rename table</value>
  </data>
  <data name="RenameTableDialog.Text" xml:space="preserve">
    <value>Give your table a new name.</value>
  </data>
  <data name="RenameTableDialogCloseBtn" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="RenameTableDialogPrimaryBtn" xml:space="preserve">
    <value>Rename</value>
  </data>
  <data name="RenameTableDialogTitle" xml:space="preserve">
    <value>Rename Table</value>
  </data>
  <data name="SelectDatabasePlaceholderText.PlaceholderText" xml:space="preserve">
    <value>Select database...</value>
  </data>
  <data name="SelectTop1000Rows.Text" xml:space="preserve">
    <value>Select top 1000 rows</value>
  </data>
  <data name="SettingsBtn.Padding" xml:space="preserve">
    <value>8</value>
  </data>
  <data name="SettingsBtn.[using:Microsoft.UI.Xaml.Controls]ToolTipService.ToolTip" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="SettingsTitle.Text" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="Success" xml:space="preserve">
    <value>Success</value>
  </data>
  <data name="TableHasBeenCleared" xml:space="preserve">
    <value>Table \"{0}\" has been cleared.</value>
  </data>
  <data name="Warning" xml:space="preserve">
    <value>Warning</value>
  </data>
</root>